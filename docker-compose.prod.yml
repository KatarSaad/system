version: '3.8'

services:
  api-gateway:
    build:
      context: ./apps/api-gateway
      dockerfile: Dockerfile
      target: production
    container_name: api-gateway-prod
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - QUEUE_DURABLE=true
      - LOGGER_QUEUE=logging_queue
      - USER_QUEUE=user_queue
      - AUTH_QUEUE=auth_queue
      - ORDER_QUEUE=order_queue
    depends_on:
      - rabbitmq
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    restart: unless-stopped

  auth-service:
    build:
      context: ./apps/auth-service
      dockerfile: Dockerfile
      target: production
    container_name: auth-service-prod
    ports:
      - '3010:3000'
    environment:
      - NODE_ENV=production
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - QUEUE_DURABLE=true
      - LOGGER_QUEUE=logging_queue
      - USER_QUEUE=user_queue
      - AUTH_QUEUE=auth_queue
      - ORDER_QUEUE=order_queue
    depends_on:
      - rabbitmq
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    restart: unless-stopped

  logger-microservice:
    build:
      context: ./apps/logger-microservice
      dockerfile: Dockerfile
      target: production
    container_name: logger-microservice-prod
    ports:
      - '3002:3002'
    environment:
      - NODE_ENV=production
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - QUEUE_DURABLE=true
      - LOGGER_QUEUE=logging_queue
    depends_on:
      - rabbitmq
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    restart: unless-stopped

  starter-application:
    build:
      context: ./apps/starter_application
      dockerfile: Dockerfile
    container_name: starter-application-prod
    ports:
      - '1000:1000'
    environment:
      - PORT=1000
      - NODE_ENV=production
      - DATABASE_URL=mysql://root:saad123@mysql:3306/starter
      - CACHE_ENABLED=true
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=my-password
      - CACHE_DEFAULT_TTL=300
      - RMQ_ENABLED=true
      - RMQ_QUEUE_NAME=default_queue
      - RMQ_RETRY_DELAY=5000
      - LOGGER_QUEUE=logging_queue
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - QUEUE_DURABLE=true
      - RMQ_CONNECTION_TIMEOUT=10000
      - CURRENT_QUEUE=CURRENT_QUEUE
      - SERVICE_NAME=SERVICE_NAME
    depends_on:
      - mysql
      - rabbitmq
      - redis
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    restart: unless-stopped

  # Monitoring stack for production
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    volumes:
      - ./apps/starter_application/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-prod
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - '3001:3000'
    depends_on:
      - prometheus
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger-prod
    ports:
      - '5775:5775/udp'
      - '6831:6831/udp'
      - '6832:6832/udp'
      - '5778:5778'
      - '16686:16686'
      - '14268:14268'
      - '14250:14250'
      - '9411:9411'
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    restart: unless-stopped

  rabbitmq:
    image: 'rabbitmq:3-management-alpine'
    container_name: 'rabbitmq-prod'
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit mq_frame_max 131072
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    restart: unless-stopped

  redis:
    image: 'redis:7-alpine'
    container_name: redis-prod
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    restart: unless-stopped

  mysql:
    image: mysql:8.0
    container_name: mysql-prod
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: saad123
      MYSQL_DATABASE: starter
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - '3308:3306'
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'mysql-prod']
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

networks:
  app-network:
    driver: bridge

volumes:
  mysql_data:
  grafana-data:
